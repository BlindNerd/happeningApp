#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('happeningapp:server');
const http = require('http');
const request = require('request');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// add the socket module and set it up to use on the server
// bring in the socket module
const io = require('socket.io')(server);

// bring in the api keys
const predictKeys = require('../config/config-keys.js');
console.log(predictKeys.accessToken);
// create a connection to the clients with socket
// this connection message is sent to the home page
io.on('connection', (socket) => {
  console.log("Socket is connected");
  socket.emit('message1',  'Created by The Blind Nerd: iblindnerd@gmail.com');
  // all socket connection and function need to go here with the socket. Object
  socket.on('geocode', (data) => {

    // make an api call to predictHQ for event information based on the clients zip
    // URL's for predict endpoints
const eventUrl = `https://api.predicthq.com/v1/events/?within=100mi@${data}&rank.gte=65&rank.lte=100&limit=20`;

    const predictApiOptions = {
      url: eventUrl,
      headers: {
        "Content-Type": "application/json; charset=utf-8",
         Authorization: `Bearer ${predictKeys.accessToken}`
      }
    };

    request.get( predictApiOptions, (error, response, body) => {
      if(error) return console.log(error);
      let data = JSON.parse(body);
      socket.emit('events', data);
    })//end of get request for predict api
  });

});// end of socket connection



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
